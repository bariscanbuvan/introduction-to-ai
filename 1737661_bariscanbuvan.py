# -*- coding: utf-8 -*-
"""1737661_BarisCanBuvan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10adPGI7dTH7E0tu_e48XMRh6uC760wKY
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error
from sklearn.preprocessing import OneHotEncoder
from sklearn.model_selection import train_test_split


data = pd.read_csv('data.csv')


plt.subplot(2, 2, 1)
plt.hist(data['price'], bins=20)
plt.title('Histogram of Price (Before Removing Outliers)')
plt.xlabel('Price')
plt.ylabel('Frequency')

plt.subplot(2, 2, 2)
plt.boxplot(data['price'])
plt.title('Boxplot of Price (Before Removing Outliers)')
plt.ylabel('Price')

plt.tight_layout()
plt.show()


mean_price = data['price'].mean()
std_price = data['price'].std()

k = 0.7

upper_threshold = mean_price + k * std_price
lower_threshold = mean_price - k * std_price

filtered_data = data[(data['price'] >= lower_threshold) & (data['price'] <= upper_threshold)].copy()


plt.subplot(2, 2, 3)
plt.hist(filtered_data['price'], bins=20)
plt.title('Histogram of Price (After Removing Outliers)')
plt.xlabel('Price')
plt.ylabel('Frequency')

plt.subplot(2, 2, 4)
plt.boxplot(filtered_data['price'])
plt.title('Boxplot of Price (After Removing Outliers)')
plt.ylabel('Price')

plt.tight_layout()
plt.show()


numeric_features = ['size_brutto_m2', 'size_netto_m2']
categorical_features = ['bathroom_count', 'classified_type', 'room_count', 'floor', 'heating', 'balcony', 'is_furnished', 'within_a_building_complex', 'from', 'building_age']
target = 'price'


X_numeric = filtered_data[numeric_features]
X_categorical = filtered_data[categorical_features]
y = filtered_data[target]

encoder = OneHotEncoder(drop='first', sparse=False)
X_categorical_encoded = encoder.fit_transform(X_categorical)
feature_names = encoder.get_feature_names_out(categorical_features)
X_categorical_encoded = pd.DataFrame(X_categorical_encoded, columns=feature_names)

X = pd.concat([X_numeric.reset_index(drop=True), X_categorical_encoded.reset_index(drop=True)], axis=1)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1)

model = LinearRegression()

model.fit(X_train, y_train)

y_pred = model.predict(X_test)

coefficients = model.coef_
intercept = model.intercept_

formula_parts = []
for feature, coefficient in zip(X.columns, coefficients):
    formula_parts.append(f'({coefficient:.2f} * {feature})')
formula = f' + '.join(formula_parts) + f' + {intercept:.2f}'

mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)

print("Model Formula:", formula)
print("Mean Squared Error:", mse)
print("Mean Absolute Error:", mae)